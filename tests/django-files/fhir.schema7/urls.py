from django.urls import path, include
from rest_framework import routers

from . import views

router = routers.DefaultRouter()

router.register("Element", views.Element)
router.register("Extension", views.Extension)
router.register("Narrative", views.Narrative)
router.register("Annotation", views.Annotation)
router.register("Attachment", views.Attachment)
router.register("Identifier", views.Identifier)
router.register("CodeableConcept", views.CodeableConcept)
router.register("Coding", views.Coding)
router.register("Quantity", views.Quantity)
router.register("Duration", views.Duration)
router.register("Distance", views.Distance)
router.register("Count", views.Count)
router.register("Money", views.Money)
router.register("Age", views.Age)
router.register("Range", views.Range)
router.register("Period", views.Period)
router.register("Ratio", views.Ratio)
router.register("Reference", views.Reference)
router.register("SampledData", views.SampledData)
router.register("Signature", views.Signature)
router.register("HumanName", views.HumanName)
router.register("Address", views.Address)
router.register("ContactPoint", views.ContactPoint)
router.register("Timing", views.Timing)
router.register("Timing_Repeat", views.Timing_Repeat)
router.register("Meta", views.Meta)
router.register("ContactDetail", views.ContactDetail)
router.register("Contributor", views.Contributor)
router.register("DataRequirement", views.DataRequirement)
router.register("DataRequirement_CodeFilter", views.DataRequirement_CodeFilter)
router.register("DataRequirement_DateFilter", views.DataRequirement_DateFilter)
router.register("DataRequirement_Sort", views.DataRequirement_Sort)
router.register("ParameterDefinition", views.ParameterDefinition)
router.register("RelatedArtifact", views.RelatedArtifact)
router.register("TriggerDefinition", views.TriggerDefinition)
router.register("UsageContext", views.UsageContext)
router.register("Dosage", views.Dosage)
router.register("Dosage_DoseAndRate", views.Dosage_DoseAndRate)
router.register("Population", views.Population)
router.register("ProductShelfLife", views.ProductShelfLife)
router.register("ProdCharacteristic", views.ProdCharacteristic)
router.register("MarketingStatus", views.MarketingStatus)
router.register("SubstanceAmount", views.SubstanceAmount)
router.register("SubstanceAmount_ReferenceRange", views.SubstanceAmount_ReferenceRange)
router.register("Expression", views.Expression)
router.register("ElementDefinition", views.ElementDefinition)
router.register("ElementDefinition_Slicing", views.ElementDefinition_Slicing)
router.register("ElementDefinition_Discriminator", views.ElementDefinition_Discriminator)
router.register("ElementDefinition_Base", views.ElementDefinition_Base)
router.register("ElementDefinition_Type", views.ElementDefinition_Type)
router.register("ElementDefinition_Example", views.ElementDefinition_Example)
router.register("ElementDefinition_Constraint", views.ElementDefinition_Constraint)
router.register("ElementDefinition_Binding", views.ElementDefinition_Binding)
router.register("ElementDefinition_Mapping", views.ElementDefinition_Mapping)
router.register("Account", views.Account)
router.register("Account_Coverage", views.Account_Coverage)
router.register("Account_Guarantor", views.Account_Guarantor)
router.register("ActivityDefinition", views.ActivityDefinition)
router.register("ActivityDefinition_Participant", views.ActivityDefinition_Participant)
router.register("ActivityDefinition_DynamicValue", views.ActivityDefinition_DynamicValue)
router.register("AdverseEvent", views.AdverseEvent)
router.register("AdverseEvent_SuspectEntity", views.AdverseEvent_SuspectEntity)
router.register("AdverseEvent_Causality", views.AdverseEvent_Causality)
router.register("AllergyIntolerance", views.AllergyIntolerance)
router.register("AllergyIntolerance_Reaction", views.AllergyIntolerance_Reaction)
router.register("Appointment", views.Appointment)
router.register("Appointment_Participant", views.Appointment_Participant)
router.register("AppointmentResponse", views.AppointmentResponse)
router.register("AuditEvent", views.AuditEvent)
router.register("AuditEvent_Agent", views.AuditEvent_Agent)
router.register("AuditEvent_Network", views.AuditEvent_Network)
router.register("AuditEvent_Source", views.AuditEvent_Source)
router.register("AuditEvent_Entity", views.AuditEvent_Entity)
router.register("AuditEvent_Detail", views.AuditEvent_Detail)
router.register("Basic", views.Basic)
router.register("Binary", views.Binary)
router.register("BiologicallyDerivedProduct", views.BiologicallyDerivedProduct)
router.register("BiologicallyDerivedProduct_Collection", views.BiologicallyDerivedProduct_Collection)
router.register("BiologicallyDerivedProduct_Processing", views.BiologicallyDerivedProduct_Processing)
router.register("BiologicallyDerivedProduct_Manipulation", views.BiologicallyDerivedProduct_Manipulation)
router.register("BiologicallyDerivedProduct_Storage", views.BiologicallyDerivedProduct_Storage)
router.register("BodyStructure", views.BodyStructure)
router.register("Bundle", views.Bundle)
router.register("Bundle_Link", views.Bundle_Link)
router.register("Bundle_Entry", views.Bundle_Entry)
router.register("Bundle_Search", views.Bundle_Search)
router.register("Bundle_Request", views.Bundle_Request)
router.register("Bundle_Response", views.Bundle_Response)
router.register("CapabilityStatement", views.CapabilityStatement)
router.register("CapabilityStatement_Software", views.CapabilityStatement_Software)
router.register("CapabilityStatement_Implementation", views.CapabilityStatement_Implementation)
router.register("CapabilityStatement_Rest", views.CapabilityStatement_Rest)
router.register("CapabilityStatement_Security", views.CapabilityStatement_Security)
router.register("CapabilityStatement_Resource", views.CapabilityStatement_Resource)
router.register("CapabilityStatement_Interaction", views.CapabilityStatement_Interaction)
router.register("CapabilityStatement_SearchParam", views.CapabilityStatement_SearchParam)
router.register("CapabilityStatement_Operation", views.CapabilityStatement_Operation)
router.register("CapabilityStatement_Interaction1", views.CapabilityStatement_Interaction1)
router.register("CapabilityStatement_Messaging", views.CapabilityStatement_Messaging)
router.register("CapabilityStatement_Endpoint", views.CapabilityStatement_Endpoint)
router.register("CapabilityStatement_SupportedMessage", views.CapabilityStatement_SupportedMessage)
router.register("CapabilityStatement_Document", views.CapabilityStatement_Document)
router.register("CarePlan", views.CarePlan)
router.register("CarePlan_Activity", views.CarePlan_Activity)
router.register("CarePlan_Detail", views.CarePlan_Detail)
router.register("CareTeam", views.CareTeam)
router.register("CareTeam_Participant", views.CareTeam_Participant)
router.register("CatalogEntry", views.CatalogEntry)
router.register("CatalogEntry_RelatedEntry", views.CatalogEntry_RelatedEntry)
router.register("ChargeItem", views.ChargeItem)
router.register("ChargeItem_Performer", views.ChargeItem_Performer)
router.register("ChargeItemDefinition", views.ChargeItemDefinition)
router.register("ChargeItemDefinition_Applicability", views.ChargeItemDefinition_Applicability)
router.register("ChargeItemDefinition_PropertyGroup", views.ChargeItemDefinition_PropertyGroup)
router.register("ChargeItemDefinition_PriceComponent", views.ChargeItemDefinition_PriceComponent)
router.register("Claim", views.Claim)
router.register("Claim_Related", views.Claim_Related)
router.register("Claim_Payee", views.Claim_Payee)
router.register("Claim_CareTeam", views.Claim_CareTeam)
router.register("Claim_SupportingInfo", views.Claim_SupportingInfo)
router.register("Claim_Diagnosis", views.Claim_Diagnosis)
router.register("Claim_Procedure", views.Claim_Procedure)
router.register("Claim_Insurance", views.Claim_Insurance)
router.register("Claim_Accident", views.Claim_Accident)
router.register("Claim_Item", views.Claim_Item)
router.register("Claim_Detail", views.Claim_Detail)
router.register("Claim_SubDetail", views.Claim_SubDetail)
router.register("ClaimResponse", views.ClaimResponse)
router.register("ClaimResponse_Item", views.ClaimResponse_Item)
router.register("ClaimResponse_Adjudication", views.ClaimResponse_Adjudication)
router.register("ClaimResponse_Detail", views.ClaimResponse_Detail)
router.register("ClaimResponse_SubDetail", views.ClaimResponse_SubDetail)
router.register("ClaimResponse_AddItem", views.ClaimResponse_AddItem)
router.register("ClaimResponse_Detail1", views.ClaimResponse_Detail1)
router.register("ClaimResponse_SubDetail1", views.ClaimResponse_SubDetail1)
router.register("ClaimResponse_Total", views.ClaimResponse_Total)
router.register("ClaimResponse_Payment", views.ClaimResponse_Payment)
router.register("ClaimResponse_ProcessNote", views.ClaimResponse_ProcessNote)
router.register("ClaimResponse_Insurance", views.ClaimResponse_Insurance)
router.register("ClaimResponse_Error", views.ClaimResponse_Error)
router.register("ClinicalImpression", views.ClinicalImpression)
router.register("ClinicalImpression_Investigation", views.ClinicalImpression_Investigation)
router.register("ClinicalImpression_Finding", views.ClinicalImpression_Finding)
router.register("CodeSystem", views.CodeSystem)
router.register("CodeSystem_Filter", views.CodeSystem_Filter)
router.register("CodeSystem_Property", views.CodeSystem_Property)
router.register("CodeSystem_Concept", views.CodeSystem_Concept)
router.register("CodeSystem_Designation", views.CodeSystem_Designation)
router.register("CodeSystem_Property1", views.CodeSystem_Property1)
router.register("Communication", views.Communication)
router.register("Communication_Payload", views.Communication_Payload)
router.register("CommunicationRequest", views.CommunicationRequest)
router.register("CommunicationRequest_Payload", views.CommunicationRequest_Payload)
router.register("CompartmentDefinition", views.CompartmentDefinition)
router.register("CompartmentDefinition_Resource", views.CompartmentDefinition_Resource)
router.register("Composition", views.Composition)
router.register("Composition_Attester", views.Composition_Attester)
router.register("Composition_RelatesTo", views.Composition_RelatesTo)
router.register("Composition_Event", views.Composition_Event)
router.register("Composition_Section", views.Composition_Section)
router.register("ConceptMap", views.ConceptMap)
router.register("ConceptMap_Group", views.ConceptMap_Group)
router.register("ConceptMap_Element", views.ConceptMap_Element)
router.register("ConceptMap_Target", views.ConceptMap_Target)
router.register("ConceptMap_DependsOn", views.ConceptMap_DependsOn)
router.register("ConceptMap_Unmapped", views.ConceptMap_Unmapped)
router.register("Condition", views.Condition)
router.register("Condition_Stage", views.Condition_Stage)
router.register("Condition_Evidence", views.Condition_Evidence)
router.register("Consent", views.Consent)
router.register("Consent_Policy", views.Consent_Policy)
router.register("Consent_Verification", views.Consent_Verification)
router.register("Consent_Provision", views.Consent_Provision)
router.register("Consent_Actor", views.Consent_Actor)
router.register("Consent_Data", views.Consent_Data)
router.register("Contract", views.Contract)
router.register("Contract_ContentDefinition", views.Contract_ContentDefinition)
router.register("Contract_Term", views.Contract_Term)
router.register("Contract_SecurityLabel", views.Contract_SecurityLabel)
router.register("Contract_Offer", views.Contract_Offer)
router.register("Contract_Party", views.Contract_Party)
router.register("Contract_Answer", views.Contract_Answer)
router.register("Contract_Asset", views.Contract_Asset)
router.register("Contract_Context", views.Contract_Context)
router.register("Contract_ValuedItem", views.Contract_ValuedItem)
router.register("Contract_Action", views.Contract_Action)
router.register("Contract_Subject", views.Contract_Subject)
router.register("Contract_Signer", views.Contract_Signer)
router.register("Contract_Friendly", views.Contract_Friendly)
router.register("Contract_Legal", views.Contract_Legal)
router.register("Contract_Rule", views.Contract_Rule)
router.register("Coverage", views.Coverage)
router.register("Coverage_Class", views.Coverage_Class)
router.register("Coverage_CostToBeneficiary", views.Coverage_CostToBeneficiary)
router.register("Coverage_Exception", views.Coverage_Exception)
router.register("CoverageEligibilityRequest", views.CoverageEligibilityRequest)
router.register("CoverageEligibilityRequest_SupportingInfo", views.CoverageEligibilityRequest_SupportingInfo)
router.register("CoverageEligibilityRequest_Insurance", views.CoverageEligibilityRequest_Insurance)
router.register("CoverageEligibilityRequest_Item", views.CoverageEligibilityRequest_Item)
router.register("CoverageEligibilityRequest_Diagnosis", views.CoverageEligibilityRequest_Diagnosis)
router.register("CoverageEligibilityResponse", views.CoverageEligibilityResponse)
router.register("CoverageEligibilityResponse_Insurance", views.CoverageEligibilityResponse_Insurance)
router.register("CoverageEligibilityResponse_Item", views.CoverageEligibilityResponse_Item)
router.register("CoverageEligibilityResponse_Benefit", views.CoverageEligibilityResponse_Benefit)
router.register("CoverageEligibilityResponse_Error", views.CoverageEligibilityResponse_Error)
router.register("DetectedIssue", views.DetectedIssue)
router.register("DetectedIssue_Evidence", views.DetectedIssue_Evidence)
router.register("DetectedIssue_Mitigation", views.DetectedIssue_Mitigation)
router.register("Device", views.Device)
router.register("Device_UdiCarrier", views.Device_UdiCarrier)
router.register("Device_DeviceName", views.Device_DeviceName)
router.register("Device_Specialization", views.Device_Specialization)
router.register("Device_Version", views.Device_Version)
router.register("Device_Property", views.Device_Property)
router.register("DeviceDefinition", views.DeviceDefinition)
router.register("DeviceDefinition_UdiDeviceIdentifier", views.DeviceDefinition_UdiDeviceIdentifier)
router.register("DeviceDefinition_DeviceName", views.DeviceDefinition_DeviceName)
router.register("DeviceDefinition_Specialization", views.DeviceDefinition_Specialization)
router.register("DeviceDefinition_Capability", views.DeviceDefinition_Capability)
router.register("DeviceDefinition_Property", views.DeviceDefinition_Property)
router.register("DeviceDefinition_Material", views.DeviceDefinition_Material)
router.register("DeviceMetric", views.DeviceMetric)
router.register("DeviceMetric_Calibration", views.DeviceMetric_Calibration)
router.register("DeviceRequest", views.DeviceRequest)
router.register("DeviceRequest_Parameter", views.DeviceRequest_Parameter)
router.register("DeviceUseStatement", views.DeviceUseStatement)
router.register("DiagnosticReport", views.DiagnosticReport)
router.register("DiagnosticReport_Media", views.DiagnosticReport_Media)
router.register("DocumentManifest", views.DocumentManifest)
router.register("DocumentManifest_Related", views.DocumentManifest_Related)
router.register("DocumentReference", views.DocumentReference)
router.register("DocumentReference_RelatesTo", views.DocumentReference_RelatesTo)
router.register("DocumentReference_Content", views.DocumentReference_Content)
router.register("DocumentReference_Context", views.DocumentReference_Context)
router.register("EffectEvidenceSynthesis", views.EffectEvidenceSynthesis)
router.register("EffectEvidenceSynthesis_SampleSize", views.EffectEvidenceSynthesis_SampleSize)
router.register("EffectEvidenceSynthesis_ResultsByExposure", views.EffectEvidenceSynthesis_ResultsByExposure)
router.register("EffectEvidenceSynthesis_EffectEstimate", views.EffectEvidenceSynthesis_EffectEstimate)
router.register("EffectEvidenceSynthesis_PrecisionEstimate", views.EffectEvidenceSynthesis_PrecisionEstimate)
router.register("EffectEvidenceSynthesis_Certainty", views.EffectEvidenceSynthesis_Certainty)
router.register("EffectEvidenceSynthesis_CertaintySubcomponent", views.EffectEvidenceSynthesis_CertaintySubcomponent)
router.register("Encounter", views.Encounter)
router.register("Encounter_StatusHistory", views.Encounter_StatusHistory)
router.register("Encounter_ClassHistory", views.Encounter_ClassHistory)
router.register("Encounter_Participant", views.Encounter_Participant)
router.register("Encounter_Diagnosis", views.Encounter_Diagnosis)
router.register("Encounter_Hospitalization", views.Encounter_Hospitalization)
router.register("Encounter_Location", views.Encounter_Location)
router.register("Endpoint", views.Endpoint)
router.register("EnrollmentRequest", views.EnrollmentRequest)
router.register("EnrollmentResponse", views.EnrollmentResponse)
router.register("EpisodeOfCare", views.EpisodeOfCare)
router.register("EpisodeOfCare_StatusHistory", views.EpisodeOfCare_StatusHistory)
router.register("EpisodeOfCare_Diagnosis", views.EpisodeOfCare_Diagnosis)
router.register("EventDefinition", views.EventDefinition)
router.register("Evidence", views.Evidence)
router.register("EvidenceVariable", views.EvidenceVariable)
router.register("EvidenceVariable_Characteristic", views.EvidenceVariable_Characteristic)
router.register("ExampleScenario", views.ExampleScenario)
router.register("ExampleScenario_Actor", views.ExampleScenario_Actor)
router.register("ExampleScenario_Instance", views.ExampleScenario_Instance)
router.register("ExampleScenario_Version", views.ExampleScenario_Version)
router.register("ExampleScenario_ContainedInstance", views.ExampleScenario_ContainedInstance)
router.register("ExampleScenario_Process", views.ExampleScenario_Process)
router.register("ExampleScenario_Step", views.ExampleScenario_Step)
router.register("ExampleScenario_Operation", views.ExampleScenario_Operation)
router.register("ExampleScenario_Alternative", views.ExampleScenario_Alternative)
router.register("ExplanationOfBenefit", views.ExplanationOfBenefit)
router.register("ExplanationOfBenefit_Related", views.ExplanationOfBenefit_Related)
router.register("ExplanationOfBenefit_Payee", views.ExplanationOfBenefit_Payee)
router.register("ExplanationOfBenefit_CareTeam", views.ExplanationOfBenefit_CareTeam)
router.register("ExplanationOfBenefit_SupportingInfo", views.ExplanationOfBenefit_SupportingInfo)
router.register("ExplanationOfBenefit_Diagnosis", views.ExplanationOfBenefit_Diagnosis)
router.register("ExplanationOfBenefit_Procedure", views.ExplanationOfBenefit_Procedure)
router.register("ExplanationOfBenefit_Insurance", views.ExplanationOfBenefit_Insurance)
router.register("ExplanationOfBenefit_Accident", views.ExplanationOfBenefit_Accident)
router.register("ExplanationOfBenefit_Item", views.ExplanationOfBenefit_Item)
router.register("ExplanationOfBenefit_Adjudication", views.ExplanationOfBenefit_Adjudication)
router.register("ExplanationOfBenefit_Detail", views.ExplanationOfBenefit_Detail)
router.register("ExplanationOfBenefit_SubDetail", views.ExplanationOfBenefit_SubDetail)
router.register("ExplanationOfBenefit_AddItem", views.ExplanationOfBenefit_AddItem)
router.register("ExplanationOfBenefit_Detail1", views.ExplanationOfBenefit_Detail1)
router.register("ExplanationOfBenefit_SubDetail1", views.ExplanationOfBenefit_SubDetail1)
router.register("ExplanationOfBenefit_Total", views.ExplanationOfBenefit_Total)
router.register("ExplanationOfBenefit_Payment", views.ExplanationOfBenefit_Payment)
router.register("ExplanationOfBenefit_ProcessNote", views.ExplanationOfBenefit_ProcessNote)
router.register("ExplanationOfBenefit_BenefitBalance", views.ExplanationOfBenefit_BenefitBalance)
router.register("ExplanationOfBenefit_Financial", views.ExplanationOfBenefit_Financial)
router.register("FamilyMemberHistory", views.FamilyMemberHistory)
router.register("FamilyMemberHistory_Condition", views.FamilyMemberHistory_Condition)
router.register("Flag", views.Flag)
router.register("Goal", views.Goal)
router.register("Goal_Target", views.Goal_Target)
router.register("GraphDefinition", views.GraphDefinition)
router.register("GraphDefinition_Link", views.GraphDefinition_Link)
router.register("GraphDefinition_Target", views.GraphDefinition_Target)
router.register("GraphDefinition_Compartment", views.GraphDefinition_Compartment)
router.register("Group", views.Group)
router.register("Group_Characteristic", views.Group_Characteristic)
router.register("Group_Member", views.Group_Member)
router.register("GuidanceResponse", views.GuidanceResponse)
router.register("HealthcareService", views.HealthcareService)
router.register("HealthcareService_Eligibility", views.HealthcareService_Eligibility)
router.register("HealthcareService_AvailableTime", views.HealthcareService_AvailableTime)
router.register("HealthcareService_NotAvailable", views.HealthcareService_NotAvailable)
router.register("ImagingStudy", views.ImagingStudy)
router.register("ImagingStudy_Series", views.ImagingStudy_Series)
router.register("ImagingStudy_Performer", views.ImagingStudy_Performer)
router.register("ImagingStudy_Instance", views.ImagingStudy_Instance)
router.register("Immunization", views.Immunization)
router.register("Immunization_Performer", views.Immunization_Performer)
router.register("Immunization_Education", views.Immunization_Education)
router.register("Immunization_Reaction", views.Immunization_Reaction)
router.register("Immunization_ProtocolApplied", views.Immunization_ProtocolApplied)
router.register("ImmunizationEvaluation", views.ImmunizationEvaluation)
router.register("ImmunizationRecommendation", views.ImmunizationRecommendation)
router.register("ImmunizationRecommendation_Recommendation", views.ImmunizationRecommendation_Recommendation)
router.register("ImmunizationRecommendation_DateCriterion", views.ImmunizationRecommendation_DateCriterion)
router.register("ImplementationGuide", views.ImplementationGuide)
router.register("ImplementationGuide_DependsOn", views.ImplementationGuide_DependsOn)
router.register("ImplementationGuide_Global", views.ImplementationGuide_Global)
router.register("ImplementationGuide_Definition", views.ImplementationGuide_Definition)
router.register("ImplementationGuide_Grouping", views.ImplementationGuide_Grouping)
router.register("ImplementationGuide_Resource", views.ImplementationGuide_Resource)
router.register("ImplementationGuide_Page", views.ImplementationGuide_Page)
router.register("ImplementationGuide_Parameter", views.ImplementationGuide_Parameter)
router.register("ImplementationGuide_Template", views.ImplementationGuide_Template)
router.register("ImplementationGuide_Manifest", views.ImplementationGuide_Manifest)
router.register("ImplementationGuide_Resource1", views.ImplementationGuide_Resource1)
router.register("ImplementationGuide_Page1", views.ImplementationGuide_Page1)
router.register("InsurancePlan", views.InsurancePlan)
router.register("InsurancePlan_Contact", views.InsurancePlan_Contact)
router.register("InsurancePlan_Coverage", views.InsurancePlan_Coverage)
router.register("InsurancePlan_Benefit", views.InsurancePlan_Benefit)
router.register("InsurancePlan_Limit", views.InsurancePlan_Limit)
router.register("InsurancePlan_Plan", views.InsurancePlan_Plan)
router.register("InsurancePlan_GeneralCost", views.InsurancePlan_GeneralCost)
router.register("InsurancePlan_SpecificCost", views.InsurancePlan_SpecificCost)
router.register("InsurancePlan_Benefit1", views.InsurancePlan_Benefit1)
router.register("InsurancePlan_Cost", views.InsurancePlan_Cost)
router.register("Invoice", views.Invoice)
router.register("Invoice_Participant", views.Invoice_Participant)
router.register("Invoice_LineItem", views.Invoice_LineItem)
router.register("Invoice_PriceComponent", views.Invoice_PriceComponent)
router.register("Library", views.Library)
router.register("Linkage", views.Linkage)
router.register("Linkage_Item", views.Linkage_Item)
router.register("List", views.List)
router.register("List_Entry", views.List_Entry)
router.register("Location", views.Location)
router.register("Location_Position", views.Location_Position)
router.register("Location_HoursOfOperation", views.Location_HoursOfOperation)
router.register("Measure", views.Measure)
router.register("Measure_Group", views.Measure_Group)
router.register("Measure_Population", views.Measure_Population)
router.register("Measure_Stratifier", views.Measure_Stratifier)
router.register("Measure_Component", views.Measure_Component)
router.register("Measure_SupplementalData", views.Measure_SupplementalData)
router.register("MeasureReport", views.MeasureReport)
router.register("MeasureReport_Group", views.MeasureReport_Group)
router.register("MeasureReport_Population", views.MeasureReport_Population)
router.register("MeasureReport_Stratifier", views.MeasureReport_Stratifier)
router.register("MeasureReport_Stratum", views.MeasureReport_Stratum)
router.register("MeasureReport_Component", views.MeasureReport_Component)
router.register("MeasureReport_Population1", views.MeasureReport_Population1)
router.register("Media", views.Media)
router.register("Medication", views.Medication)
router.register("Medication_Ingredient", views.Medication_Ingredient)
router.register("Medication_Batch", views.Medication_Batch)
router.register("MedicationAdministration", views.MedicationAdministration)
router.register("MedicationAdministration_Performer", views.MedicationAdministration_Performer)
router.register("MedicationAdministration_Dosage", views.MedicationAdministration_Dosage)
router.register("MedicationDispense", views.MedicationDispense)
router.register("MedicationDispense_Performer", views.MedicationDispense_Performer)
router.register("MedicationDispense_Substitution", views.MedicationDispense_Substitution)
router.register("MedicationKnowledge", views.MedicationKnowledge)
router.register("MedicationKnowledge_RelatedMedicationKnowledge", views.MedicationKnowledge_RelatedMedicationKnowledge)
router.register("MedicationKnowledge_Monograph", views.MedicationKnowledge_Monograph)
router.register("MedicationKnowledge_Ingredient", views.MedicationKnowledge_Ingredient)
router.register("MedicationKnowledge_Cost", views.MedicationKnowledge_Cost)
router.register("MedicationKnowledge_MonitoringProgram", views.MedicationKnowledge_MonitoringProgram)
router.register("MedicationKnowledge_AdministrationGuidelines", views.MedicationKnowledge_AdministrationGuidelines)
router.register("MedicationKnowledge_Dosage", views.MedicationKnowledge_Dosage)
router.register("MedicationKnowledge_PatientCharacteristics", views.MedicationKnowledge_PatientCharacteristics)
router.register("MedicationKnowledge_MedicineClassification", views.MedicationKnowledge_MedicineClassification)
router.register("MedicationKnowledge_Packaging", views.MedicationKnowledge_Packaging)
router.register("MedicationKnowledge_DrugCharacteristic", views.MedicationKnowledge_DrugCharacteristic)
router.register("MedicationKnowledge_Regulatory", views.MedicationKnowledge_Regulatory)
router.register("MedicationKnowledge_Substitution", views.MedicationKnowledge_Substitution)
router.register("MedicationKnowledge_Schedule", views.MedicationKnowledge_Schedule)
router.register("MedicationKnowledge_MaxDispense", views.MedicationKnowledge_MaxDispense)
router.register("MedicationKnowledge_Kinetics", views.MedicationKnowledge_Kinetics)
router.register("MedicationRequest", views.MedicationRequest)
router.register("MedicationRequest_DispenseRequest", views.MedicationRequest_DispenseRequest)
router.register("MedicationRequest_InitialFill", views.MedicationRequest_InitialFill)
router.register("MedicationRequest_Substitution", views.MedicationRequest_Substitution)
router.register("MedicationStatement", views.MedicationStatement)
router.register("MedicinalProduct", views.MedicinalProduct)
router.register("MedicinalProduct_Name", views.MedicinalProduct_Name)
router.register("MedicinalProduct_NamePart", views.MedicinalProduct_NamePart)
router.register("MedicinalProduct_CountryLanguage", views.MedicinalProduct_CountryLanguage)
router.register("MedicinalProduct_ManufacturingBusinessOperation", views.MedicinalProduct_ManufacturingBusinessOperation)
router.register("MedicinalProduct_SpecialDesignation", views.MedicinalProduct_SpecialDesignation)
router.register("MedicinalProductAuthorization", views.MedicinalProductAuthorization)
router.register("MedicinalProductAuthorization_JurisdictionalAuthorization", views.MedicinalProductAuthorization_JurisdictionalAuthorization)
router.register("MedicinalProductAuthorization_Procedure", views.MedicinalProductAuthorization_Procedure)
router.register("MedicinalProductContraindication", views.MedicinalProductContraindication)
router.register("MedicinalProductContraindication_OtherTherapy", views.MedicinalProductContraindication_OtherTherapy)
router.register("MedicinalProductIndication", views.MedicinalProductIndication)
router.register("MedicinalProductIndication_OtherTherapy", views.MedicinalProductIndication_OtherTherapy)
router.register("MedicinalProductIngredient", views.MedicinalProductIngredient)
router.register("MedicinalProductIngredient_SpecifiedSubstance", views.MedicinalProductIngredient_SpecifiedSubstance)
router.register("MedicinalProductIngredient_Strength", views.MedicinalProductIngredient_Strength)
router.register("MedicinalProductIngredient_ReferenceStrength", views.MedicinalProductIngredient_ReferenceStrength)
router.register("MedicinalProductIngredient_Substance", views.MedicinalProductIngredient_Substance)
router.register("MedicinalProductInteraction", views.MedicinalProductInteraction)
router.register("MedicinalProductInteraction_Interactant", views.MedicinalProductInteraction_Interactant)
router.register("MedicinalProductManufactured", views.MedicinalProductManufactured)
router.register("MedicinalProductPackaged", views.MedicinalProductPackaged)
router.register("MedicinalProductPackaged_BatchIdentifier", views.MedicinalProductPackaged_BatchIdentifier)
router.register("MedicinalProductPackaged_PackageItem", views.MedicinalProductPackaged_PackageItem)
router.register("MedicinalProductPharmaceutical", views.MedicinalProductPharmaceutical)
router.register("MedicinalProductPharmaceutical_Characteristics", views.MedicinalProductPharmaceutical_Characteristics)
router.register("MedicinalProductPharmaceutical_RouteOfAdministration", views.MedicinalProductPharmaceutical_RouteOfAdministration)
router.register("MedicinalProductPharmaceutical_TargetSpecies", views.MedicinalProductPharmaceutical_TargetSpecies)
router.register("MedicinalProductPharmaceutical_WithdrawalPeriod", views.MedicinalProductPharmaceutical_WithdrawalPeriod)
router.register("MedicinalProductUndesirableEffect", views.MedicinalProductUndesirableEffect)
router.register("MessageDefinition", views.MessageDefinition)
router.register("MessageDefinition_Focus", views.MessageDefinition_Focus)
router.register("MessageDefinition_AllowedResponse", views.MessageDefinition_AllowedResponse)
router.register("MessageHeader", views.MessageHeader)
router.register("MessageHeader_Destination", views.MessageHeader_Destination)
router.register("MessageHeader_Source", views.MessageHeader_Source)
router.register("MessageHeader_Response", views.MessageHeader_Response)
router.register("MolecularSequence", views.MolecularSequence)
router.register("MolecularSequence_ReferenceSeq", views.MolecularSequence_ReferenceSeq)
router.register("MolecularSequence_Variant", views.MolecularSequence_Variant)
router.register("MolecularSequence_Quality", views.MolecularSequence_Quality)
router.register("MolecularSequence_Roc", views.MolecularSequence_Roc)
router.register("MolecularSequence_Repository", views.MolecularSequence_Repository)
router.register("MolecularSequence_StructureVariant", views.MolecularSequence_StructureVariant)
router.register("MolecularSequence_Outer", views.MolecularSequence_Outer)
router.register("MolecularSequence_Inner", views.MolecularSequence_Inner)
router.register("NamingSystem", views.NamingSystem)
router.register("NamingSystem_UniqueId", views.NamingSystem_UniqueId)
router.register("NutritionOrder", views.NutritionOrder)
router.register("NutritionOrder_OralDiet", views.NutritionOrder_OralDiet)
router.register("NutritionOrder_Nutrient", views.NutritionOrder_Nutrient)
router.register("NutritionOrder_Texture", views.NutritionOrder_Texture)
router.register("NutritionOrder_Supplement", views.NutritionOrder_Supplement)
router.register("NutritionOrder_EnteralFormula", views.NutritionOrder_EnteralFormula)
router.register("NutritionOrder_Administration", views.NutritionOrder_Administration)
router.register("Observation", views.Observation)
router.register("Observation_ReferenceRange", views.Observation_ReferenceRange)
router.register("Observation_Component", views.Observation_Component)
router.register("ObservationDefinition", views.ObservationDefinition)
router.register("ObservationDefinition_QuantitativeDetails", views.ObservationDefinition_QuantitativeDetails)
router.register("ObservationDefinition_QualifiedInterval", views.ObservationDefinition_QualifiedInterval)
router.register("OperationDefinition", views.OperationDefinition)
router.register("OperationDefinition_Parameter", views.OperationDefinition_Parameter)
router.register("OperationDefinition_Binding", views.OperationDefinition_Binding)
router.register("OperationDefinition_ReferencedFrom", views.OperationDefinition_ReferencedFrom)
router.register("OperationDefinition_Overload", views.OperationDefinition_Overload)
router.register("OperationOutcome", views.OperationOutcome)
router.register("OperationOutcome_Issue", views.OperationOutcome_Issue)
router.register("Organization", views.Organization)
router.register("Organization_Contact", views.Organization_Contact)
router.register("OrganizationAffiliation", views.OrganizationAffiliation)
router.register("Parameters", views.Parameters)
router.register("Parameters_Parameter", views.Parameters_Parameter)
router.register("Patient", views.Patient)
router.register("Patient_Contact", views.Patient_Contact)
router.register("Patient_Communication", views.Patient_Communication)
router.register("Patient_Link", views.Patient_Link)
router.register("PaymentNotice", views.PaymentNotice)
router.register("PaymentReconciliation", views.PaymentReconciliation)
router.register("PaymentReconciliation_Detail", views.PaymentReconciliation_Detail)
router.register("PaymentReconciliation_ProcessNote", views.PaymentReconciliation_ProcessNote)
router.register("Person", views.Person)
router.register("Person_Link", views.Person_Link)
router.register("PlanDefinition", views.PlanDefinition)
router.register("PlanDefinition_Goal", views.PlanDefinition_Goal)
router.register("PlanDefinition_Target", views.PlanDefinition_Target)
router.register("PlanDefinition_Action", views.PlanDefinition_Action)
router.register("PlanDefinition_Condition", views.PlanDefinition_Condition)
router.register("PlanDefinition_RelatedAction", views.PlanDefinition_RelatedAction)
router.register("PlanDefinition_Participant", views.PlanDefinition_Participant)
router.register("PlanDefinition_DynamicValue", views.PlanDefinition_DynamicValue)
router.register("Practitioner", views.Practitioner)
router.register("Practitioner_Qualification", views.Practitioner_Qualification)
router.register("PractitionerRole", views.PractitionerRole)
router.register("PractitionerRole_AvailableTime", views.PractitionerRole_AvailableTime)
router.register("PractitionerRole_NotAvailable", views.PractitionerRole_NotAvailable)
router.register("Procedure", views.Procedure)
router.register("Procedure_Performer", views.Procedure_Performer)
router.register("Procedure_FocalDevice", views.Procedure_FocalDevice)
router.register("Provenance", views.Provenance)
router.register("Provenance_Agent", views.Provenance_Agent)
router.register("Provenance_Entity", views.Provenance_Entity)
router.register("Questionnaire", views.Questionnaire)
router.register("Questionnaire_Item", views.Questionnaire_Item)
router.register("Questionnaire_EnableWhen", views.Questionnaire_EnableWhen)
router.register("Questionnaire_AnswerOption", views.Questionnaire_AnswerOption)
router.register("Questionnaire_Initial", views.Questionnaire_Initial)
router.register("QuestionnaireResponse", views.QuestionnaireResponse)
router.register("QuestionnaireResponse_Item", views.QuestionnaireResponse_Item)
router.register("QuestionnaireResponse_Answer", views.QuestionnaireResponse_Answer)
router.register("RelatedPerson", views.RelatedPerson)
router.register("RelatedPerson_Communication", views.RelatedPerson_Communication)
router.register("RequestGroup", views.RequestGroup)
router.register("RequestGroup_Action", views.RequestGroup_Action)
router.register("RequestGroup_Condition", views.RequestGroup_Condition)
router.register("RequestGroup_RelatedAction", views.RequestGroup_RelatedAction)
router.register("ResearchDefinition", views.ResearchDefinition)
router.register("ResearchElementDefinition", views.ResearchElementDefinition)
router.register("ResearchElementDefinition_Characteristic", views.ResearchElementDefinition_Characteristic)
router.register("ResearchStudy", views.ResearchStudy)
router.register("ResearchStudy_Arm", views.ResearchStudy_Arm)
router.register("ResearchStudy_Objective", views.ResearchStudy_Objective)
router.register("ResearchSubject", views.ResearchSubject)
router.register("RiskAssessment", views.RiskAssessment)
router.register("RiskAssessment_Prediction", views.RiskAssessment_Prediction)
router.register("RiskEvidenceSynthesis", views.RiskEvidenceSynthesis)
router.register("RiskEvidenceSynthesis_SampleSize", views.RiskEvidenceSynthesis_SampleSize)
router.register("RiskEvidenceSynthesis_RiskEstimate", views.RiskEvidenceSynthesis_RiskEstimate)
router.register("RiskEvidenceSynthesis_PrecisionEstimate", views.RiskEvidenceSynthesis_PrecisionEstimate)
router.register("RiskEvidenceSynthesis_Certainty", views.RiskEvidenceSynthesis_Certainty)
router.register("RiskEvidenceSynthesis_CertaintySubcomponent", views.RiskEvidenceSynthesis_CertaintySubcomponent)
router.register("Schedule", views.Schedule)
router.register("SearchParameter", views.SearchParameter)
router.register("SearchParameter_Component", views.SearchParameter_Component)
router.register("ServiceRequest", views.ServiceRequest)
router.register("Slot", views.Slot)
router.register("Specimen", views.Specimen)
router.register("Specimen_Collection", views.Specimen_Collection)
router.register("Specimen_Processing", views.Specimen_Processing)
router.register("Specimen_Container", views.Specimen_Container)
router.register("SpecimenDefinition", views.SpecimenDefinition)
router.register("SpecimenDefinition_TypeTested", views.SpecimenDefinition_TypeTested)
router.register("SpecimenDefinition_Container", views.SpecimenDefinition_Container)
router.register("SpecimenDefinition_Additive", views.SpecimenDefinition_Additive)
router.register("SpecimenDefinition_Handling", views.SpecimenDefinition_Handling)
router.register("StructureDefinition", views.StructureDefinition)
router.register("StructureDefinition_Mapping", views.StructureDefinition_Mapping)
router.register("StructureDefinition_Context", views.StructureDefinition_Context)
router.register("StructureDefinition_Snapshot", views.StructureDefinition_Snapshot)
router.register("StructureDefinition_Differential", views.StructureDefinition_Differential)
router.register("StructureMap", views.StructureMap)
router.register("StructureMap_Structure", views.StructureMap_Structure)
router.register("StructureMap_Group", views.StructureMap_Group)
router.register("StructureMap_Input", views.StructureMap_Input)
router.register("StructureMap_Rule", views.StructureMap_Rule)
router.register("StructureMap_Source", views.StructureMap_Source)
router.register("StructureMap_Target", views.StructureMap_Target)
router.register("StructureMap_Parameter", views.StructureMap_Parameter)
router.register("StructureMap_Dependent", views.StructureMap_Dependent)
router.register("Subscription", views.Subscription)
router.register("Subscription_Channel", views.Subscription_Channel)
router.register("Substance", views.Substance)
router.register("Substance_Instance", views.Substance_Instance)
router.register("Substance_Ingredient", views.Substance_Ingredient)
router.register("SubstanceNucleicAcid", views.SubstanceNucleicAcid)
router.register("SubstanceNucleicAcid_Subunit", views.SubstanceNucleicAcid_Subunit)
router.register("SubstanceNucleicAcid_Linkage", views.SubstanceNucleicAcid_Linkage)
router.register("SubstanceNucleicAcid_Sugar", views.SubstanceNucleicAcid_Sugar)
router.register("SubstancePolymer", views.SubstancePolymer)
router.register("SubstancePolymer_MonomerSet", views.SubstancePolymer_MonomerSet)
router.register("SubstancePolymer_StartingMaterial", views.SubstancePolymer_StartingMaterial)
router.register("SubstancePolymer_Repeat", views.SubstancePolymer_Repeat)
router.register("SubstancePolymer_RepeatUnit", views.SubstancePolymer_RepeatUnit)
router.register("SubstancePolymer_DegreeOfPolymerisation", views.SubstancePolymer_DegreeOfPolymerisation)
router.register("SubstancePolymer_StructuralRepresentation", views.SubstancePolymer_StructuralRepresentation)
router.register("SubstanceProtein", views.SubstanceProtein)
router.register("SubstanceProtein_Subunit", views.SubstanceProtein_Subunit)
router.register("SubstanceReferenceInformation", views.SubstanceReferenceInformation)
router.register("SubstanceReferenceInformation_Gene", views.SubstanceReferenceInformation_Gene)
router.register("SubstanceReferenceInformation_GeneElement", views.SubstanceReferenceInformation_GeneElement)
router.register("SubstanceReferenceInformation_Classification", views.SubstanceReferenceInformation_Classification)
router.register("SubstanceReferenceInformation_Target", views.SubstanceReferenceInformation_Target)
router.register("SubstanceSourceMaterial", views.SubstanceSourceMaterial)
router.register("SubstanceSourceMaterial_FractionDescription", views.SubstanceSourceMaterial_FractionDescription)
router.register("SubstanceSourceMaterial_Organism", views.SubstanceSourceMaterial_Organism)
router.register("SubstanceSourceMaterial_Author", views.SubstanceSourceMaterial_Author)
router.register("SubstanceSourceMaterial_Hybrid", views.SubstanceSourceMaterial_Hybrid)
router.register("SubstanceSourceMaterial_OrganismGeneral", views.SubstanceSourceMaterial_OrganismGeneral)
router.register("SubstanceSourceMaterial_PartDescription", views.SubstanceSourceMaterial_PartDescription)
router.register("SubstanceSpecification", views.SubstanceSpecification)
router.register("SubstanceSpecification_Moiety", views.SubstanceSpecification_Moiety)
router.register("SubstanceSpecification_Property", views.SubstanceSpecification_Property)
router.register("SubstanceSpecification_Structure", views.SubstanceSpecification_Structure)
router.register("SubstanceSpecification_Isotope", views.SubstanceSpecification_Isotope)
router.register("SubstanceSpecification_MolecularWeight", views.SubstanceSpecification_MolecularWeight)
router.register("SubstanceSpecification_Representation", views.SubstanceSpecification_Representation)
router.register("SubstanceSpecification_Code", views.SubstanceSpecification_Code)
router.register("SubstanceSpecification_Name", views.SubstanceSpecification_Name)
router.register("SubstanceSpecification_Official", views.SubstanceSpecification_Official)
router.register("SubstanceSpecification_Relationship", views.SubstanceSpecification_Relationship)
router.register("SupplyDelivery", views.SupplyDelivery)
router.register("SupplyDelivery_SuppliedItem", views.SupplyDelivery_SuppliedItem)
router.register("SupplyRequest", views.SupplyRequest)
router.register("SupplyRequest_Parameter", views.SupplyRequest_Parameter)
router.register("Task", views.Task)
router.register("Task_Restriction", views.Task_Restriction)
router.register("Task_Input", views.Task_Input)
router.register("Task_Output", views.Task_Output)
router.register("TerminologyCapabilities", views.TerminologyCapabilities)
router.register("TerminologyCapabilities_Software", views.TerminologyCapabilities_Software)
router.register("TerminologyCapabilities_Implementation", views.TerminologyCapabilities_Implementation)
router.register("TerminologyCapabilities_CodeSystem", views.TerminologyCapabilities_CodeSystem)
router.register("TerminologyCapabilities_Version", views.TerminologyCapabilities_Version)
router.register("TerminologyCapabilities_Filter", views.TerminologyCapabilities_Filter)
router.register("TerminologyCapabilities_Expansion", views.TerminologyCapabilities_Expansion)
router.register("TerminologyCapabilities_Parameter", views.TerminologyCapabilities_Parameter)
router.register("TerminologyCapabilities_ValidateCode", views.TerminologyCapabilities_ValidateCode)
router.register("TerminologyCapabilities_Translation", views.TerminologyCapabilities_Translation)
router.register("TerminologyCapabilities_Closure", views.TerminologyCapabilities_Closure)
router.register("TestReport", views.TestReport)
router.register("TestReport_Participant", views.TestReport_Participant)
router.register("TestReport_Setup", views.TestReport_Setup)
router.register("TestReport_Action", views.TestReport_Action)
router.register("TestReport_Operation", views.TestReport_Operation)
router.register("TestReport_Assert", views.TestReport_Assert)
router.register("TestReport_Test", views.TestReport_Test)
router.register("TestReport_Action1", views.TestReport_Action1)
router.register("TestReport_Teardown", views.TestReport_Teardown)
router.register("TestReport_Action2", views.TestReport_Action2)
router.register("TestScript", views.TestScript)
router.register("TestScript_Origin", views.TestScript_Origin)
router.register("TestScript_Destination", views.TestScript_Destination)
router.register("TestScript_Metadata", views.TestScript_Metadata)
router.register("TestScript_Link", views.TestScript_Link)
router.register("TestScript_Capability", views.TestScript_Capability)
router.register("TestScript_Fixture", views.TestScript_Fixture)
router.register("TestScript_Variable", views.TestScript_Variable)
router.register("TestScript_Setup", views.TestScript_Setup)
router.register("TestScript_Action", views.TestScript_Action)
router.register("TestScript_Operation", views.TestScript_Operation)
router.register("TestScript_RequestHeader", views.TestScript_RequestHeader)
router.register("TestScript_Assert", views.TestScript_Assert)
router.register("TestScript_Test", views.TestScript_Test)
router.register("TestScript_Action1", views.TestScript_Action1)
router.register("TestScript_Teardown", views.TestScript_Teardown)
router.register("TestScript_Action2", views.TestScript_Action2)
router.register("ValueSet", views.ValueSet)
router.register("ValueSet_Compose", views.ValueSet_Compose)
router.register("ValueSet_Include", views.ValueSet_Include)
router.register("ValueSet_Concept", views.ValueSet_Concept)
router.register("ValueSet_Designation", views.ValueSet_Designation)
router.register("ValueSet_Filter", views.ValueSet_Filter)
router.register("ValueSet_Expansion", views.ValueSet_Expansion)
router.register("ValueSet_Parameter", views.ValueSet_Parameter)
router.register("ValueSet_Contains", views.ValueSet_Contains)
router.register("VerificationResult", views.VerificationResult)
router.register("VerificationResult_PrimarySource", views.VerificationResult_PrimarySource)
router.register("VerificationResult_Attestation", views.VerificationResult_Attestation)
router.register("VerificationResult_Validator", views.VerificationResult_Validator)
router.register("VisionPrescription", views.VisionPrescription)
router.register("VisionPrescription_LensSpecification", views.VisionPrescription_LensSpecification)
router.register("VisionPrescription_Prism", views.VisionPrescription_Prism)

urlpatterns = [
    path("", include(router.urls)),
]
